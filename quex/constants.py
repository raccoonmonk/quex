# Project Quex (http://quex.sourceforge.net); License: MIT;
# (C) 2005-2020 Frank-Rene Schaefer; 
#_______________________________________________________________________________
from quex.engine.misc.quex_enum  import QuexEnum
from enum import auto

INTEGER_MAX = 0x7fffffff

DEFINE_SECTION_COMMAND_SET = set(["\\macro", "\\plot", "\\run", "\\lexemes"])

# E_Border's speed is critical for performance of NFA to DFA conversion.
# => implement as a class different from 'QuexEnum'
class E_Border:
    BEGIN = 1   # BEGIN > END is essential for comparison!
    END   = 0

class E_Files(QuexEnum):
    HEADER              = auto()
    HEADER_IMPLEMTATION = auto()
    SOURCE              = auto()
    _DEBUG_Files        = auto()

class E_StateIndices(QuexEnum):
    DROP_OUT = auto()
    RELOAD_FORWARD = auto()
    RELOAD_BACKWARD = auto()
    BEFORE_ENTRY = auto()
    VOID = auto()

class E_AcceptanceCondition (QuexEnum):
    END_OF_STREAM = auto()
    BEGIN_OF_STREAM = auto()
    BEGIN_OF_LINE = auto()
    _DEBUG_NAME_E_AcceptanceCondition = auto()

def E_AcceptanceConditionSet_string(ACSet):
    if not ACSet: return ""
    result = []
    for acc_condition_id in sorted(ACSet, key=QuexEnum.general_key):
        if   acc_condition_id == E_AcceptanceCondition.BEGIN_OF_LINE:
            result.append("pre=bol")
        elif acc_condition_id == E_AcceptanceCondition.BEGIN_OF_STREAM:
            result.append("pre=bos")
        elif acc_condition_id == E_AcceptanceCondition.END_OF_STREAM:
            result.append("pre=eos")
        else:
            result.append(("pre=%s" % acc_condition_id).replace("L", ""))
    return ", ".join(result)

def E_AcceptanceConditionSet_corresponance(AC0, AC1):
    for acc_condition_id in E_AcceptanceCondition:
        if acc_condition_id in AC0 and acc_condition_id not in AC1:
            return False
        elif acc_condition_id in AC0 and acc_condition_id not in AC1:
            return False
    return True

class E_PostContextIDs(QuexEnum):
    NONE = auto()
    _DEBUG_NAME_E_PostContextIDs = auto()

class E_TransitionN(QuexEnum):
    VOID = auto()
    LEXEME_START_PLUS_ONE = auto()
    IRRELEVANT = auto()
    _DEBUG_NAME_TransitionNs = auto()

class E_InputActions(QuexEnum):
    DEREF = auto()
    INCREMENT_THEN_DEREF = auto()
    DECREMENT_THEN_DEREF = auto()
    _DEBUG_InputActions = auto()

class E_Compression(QuexEnum):
    PATH = auto()
    PATH_UNIFORM = auto()
    TEMPLATE = auto()
    TEMPLATE_UNIFORM = auto()
    _DEBUG_Compression = auto()

class E_Count(QuexEnum):
    VIRGIN = auto()
    VOID   = auto()
    NONE   = auto()
    _DEBUG_Count = auto()

class E_CharacterCountType(QuexEnum):
    COLUMN = auto()
    LINE = auto()
    GRID = auto()
    _DEBUG_CharacterCountType = auto()

class E_Commonality(QuexEnum):
    NONE = auto()
    BOTH = auto() 
    A_IN_B = auto() 
    B_IN_A = auto()

class E_TerminalType(QuexEnum):
    MATCH_PATTERN = auto()   # A pattern match
    MATCH_FAILURE = auto()   # Nothing has matched
    BAD_LEXATOM = auto()     # Encoding error / inadmissible input
    LOAD_FAILURE = auto()    # Buffer loading failed for some reason
    END_OF_STREAM = auto()   # End of stream has been reached
    PLAIN = auto()           # Plain code (likely generated by Quex),
    SKIP_RANGE_OPEN = auto() # End of file reached while skipping a range.
    _DEBUG_TerminalType = auto()

class E_IncidenceIDs(QuexEnum):
    # 'E_IncidenceIDs' are keys of 'standard_incidence_db'
    AFTER_MATCH = auto()
    BAD_LEXATOM = auto()
    BUFFER_BEFORE_CHANGE = auto()
    BUFFER_OVERFLOW = auto()
    LOAD_FAILURE = auto()
    CONTEXT_FREE_MATCH = auto()
    END_OF_STREAM = auto()
    INDENTATION_BAD = auto()
    INDENTATION_MISFIT = auto()
    INDENTATION_HANDLER = auto()
    INDENTATION_INDENT = auto()
    INDENTATION_NODENT = auto()
    INDENTATION_DEDENT = auto()
    MATCH = auto()
    MATCH_FAILURE = auto()
    MODE_ENTRY = auto()
    MODE_EXIT = auto()
    SKIP_RANGE_OPEN = auto()
    RESTORE_ACCEPTANCE = auto()
    VOID = auto()
    _DEBUG_IncidenceIDs = auto()

class E_DoorIdIndex(QuexEnum):
    TRANSITION_BLOCK = auto()
    ACCEPTANCE = auto()
    BIPD_RETURN = auto()
    STATE_MACHINE_ENTRY = auto()
    GLOBAL_STATE_ROUTER = auto()
    GLOBAL_END_OF_PRE_CONTEXT_CHECK = auto()
    GLOBAL_REENTRY = auto()
    RETURN_WITH_ON_AFTER_MATCH = auto()
    CONTINUE_WITH_ON_AFTER_MATCH = auto()
    CONTINUE_WITHOUT_ON_AFTER_MATCH = auto()
    _DEBUG_DoorIdIndex = auto()

class E_Op (QuexEnum):
    Accepter = auto()
    Assign = auto()
    AssignConstant = auto()
    AssignPointerDifference = auto()
    PointerAdd = auto()
    PointerAssignMin = auto()
    ColumnCountShift = auto()
    ColumnCountSet = auto()
    ColumnCountAdd = auto()
    ColumnCountGridAdd = auto()
    ColumnCountReferencePDeltaAdd = auto()
    ColumnCountReferencePSet = auto()
    GotoDoorId = auto()
    GotoDoorIdIfCounterEqualZero = auto()
    GotoDoorIdIfInputPEqualPointer = auto()
    GotoDoorIdIfInputPNotEqualPointer = auto()
    IfAcceptanceConditionSetPositionAndGoto = auto()
    IndentationHandlerCall = auto()
    IndentationBadHandlerCall = auto()
    Decrement = auto()
    InputPDereference = auto()
    Increment = auto()
    LexemeResetTerminatingZero = auto()
    LineCountAdd = auto()
    LineCountShift = auto()
    PathIteratorSet = auto()
    PreContextOK = auto()
    PrepareAfterReload = auto()
    PasspartoutCounterCall = auto()
    ReturnFromLexicalAnalysis = auto()
    RouterByLastAcceptance = auto()
    RouterOnStateKey = auto()
    QuexDebug = auto()
    QuexAssertNoPassage = auto()
    StoreInputPosition = auto()
    TemplateStateKeySet = auto()
    _DEBUG_Commands = auto()

class E_R(QuexEnum):
    AcceptanceRegister = auto()
    Buffer = auto()
    BackupStreamPositionOfLexemeStartP = auto()
    Counter = auto()
    Column = auto()
    Input = auto()
    Indentation = auto()
    InputP = auto()
    BackupP = auto()
    InputPBeforeReload = auto()
    LexemeStartP = auto()
    LexemeStartBeforeReload = auto()
    LexemeEnd = auto()
    EndOfStreamP = auto()
    BufferFrontP = auto()
    LoopRestartP = auto()
    Line = auto()
    LoadResult = auto()
    MinRequiredBufferPositionWithoutLexemeStartP = auto()
    PathIterator = auto()
    PreContextFlags = auto()
    PreContextVerdict = auto()
    CountReferenceP = auto()
    StandardOutput = auto()
    PositionRegister = auto()
    PositionDelta = auto()
    TargetStateElseIndex = auto()
    TargetStateIndex = auto()
    TemplateStateKey = auto()
    ThreadOfControl = auto()

