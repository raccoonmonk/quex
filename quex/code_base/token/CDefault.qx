token_type {
   header {
$$<std-lib>--------------------------------------------------------------------
#include <stdio.h>
#include <string.h>
$$-----------------------------------------------------------------------------
#include <$$QUEX_LIB_DIR$$/types.h>
#include <$$QUEX_LIB_DIR$$/MemoryManager>
#include <$$QUEX_LIB_DIR$$/asserts>
#include <$$QUEX_LIB_DIR$$/standard_functions>

#include <$$OUTPUT_DIR$$/lib/lexeme/basics>
#include <$$OUTPUT_DIR$$/lib/lexeme/converter-from-lexeme>

struct $$TOKEN_CLASS$$_tag;

QUEX_NAMESPACE_MAIN_OPEN

extern QUEX_TYPE_LEXATOM QUEX_NAME(LexemeNull);
extern const char*       QUEX_NAME(map_token_id_to_name)(const QUEX_TYPE_TOKEN_ID);

QUEX_NAMESPACE_MAIN_CLOSE

extern const char* $$TOKEN_CLASS$$_get_string(struct $$TOKEN_CLASS$$_tag* me,  
                                              char*                       buffer, 
                                              size_t                      BufferSize); 
}

standard {
   id       : uint32_t;
   line_n   : size_t;
   column_n : size_t;
}
distinct {
   text   :  const QUEX_TYPE_LEXATOM*;
   number :  size_t;
}

repetition_n = number;

inheritable;

constructor {
   self.number = 0;
   self.text   = LexemeNull;
}

destructor {
   if( self.text != LexemeNull ) {
       QUEX_GNAME_LIB(MemoryManager_free)((void*)self.text,
                                  E_MemoryObjectType_TEXT);
       self.text = LexemeNull;
   }
}

copy {
    self.id  = Other.id;

    if( self.text != LexemeNull ) {
        QUEX_GNAME_LIB(MemoryManager_free)((void*)self.text, E_MemoryObjectType_TEXT);
    }
    if( Other.text != LexemeNull ) {
        self.text = QUEX_GNAME(lexeme_clone)(self.text, 
                                             QUEX_GNAME(lexeme_length)(Other.text));
        if( ! self.text ) self.text = LexemeNull;
    }
    self.number = Other.number;

    $$<token-stamp-line>   self.line_n   = Other.line_n;$$
    $$<token-stamp-column> self.column_n = Other.column_n;$$
}

take_text {
    if( self.text != LexemeNull ) {
        QUEX_GNAME_LIB(MemoryManager_free)((void*)self.text, E_MemoryObjectType_TEXT);
    }
    if( Begin != LexemeNull ) {
        __quex_assert(End >= Begin);
        self.text = QUEX_GNAME(lexeme_clone)(Begin, (size_t)(End - Begin));
        if( ! self.text ) self.text = LexemeNull;
        *((QUEX_TYPE_LEXATOM*)(self.text + (End - Begin))) = (QUEX_TYPE_LEXATOM)0;
    } else {
        self.text = LexemeNull;
    }
}

body {
   /* Nothing here. */
}

footer {
    const char* 
    $$TOKEN_CLASS$$_get_string($$TOKEN_CLASS$$* me, char*   buffer, size_t  BufferSize) 
    {
        const char*  token_id_str = QUEX_GNAME(map_token_id_to_name)(me->id);
        const char*  BufferEnd    = buffer + BufferSize;
        char*        writerator   = 0;

        if( ! BufferSize ) return NULL;

        /* Token Type */
        writerator = buffer; 
        writerator += __QUEX_STD_strlcpy(writerator, token_id_str, (size_t)(BufferEnd - writerator));

        /* Opening Quote */
        if( BufferEnd - writerator > 2 ) {
            *writerator++ = ' ';
            *writerator++ = '\'';
        }

        /* The String */
        writerator = QUEX_GNAME(lexeme_to_pretty_char)(me->text, writerator, BufferEnd);

        /* Closing Quote */
        if( BufferEnd - writerator > 1 ) {
            *writerator++ = '\'';
        }
        *writerator = '\0';
        return buffer;
    }

$$<token-class-only>-----------------------------------------------------------
inline const char* QUEX_GNAME(map_token_id_to_name)(QUEX_TYPE_TOKEN_ID Id)
{ (void)Id; return "<token ids unknown at class generation time>"; }
$$-----------------------------------------------------------------------------

#include <$$OUTPUT_DIR$$/lib/lexeme/basics.i>
   }
}

