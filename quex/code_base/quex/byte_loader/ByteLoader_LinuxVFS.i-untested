/* vim: ft=c:
 * (C) Frank-Rene Schaefer */
#ifndef  QUEX_INCLUDE_GUARD__QUEX__BYTE_LOADER__BYTE_LOADER_LINUX_VFS_I
#define  QUEX_INCLUDE_GUARD__QUEX__BYTE_LOADER__BYTE_LOADER_LINUX_VFS_I

$$INC: quex/MemoryManager$$
$$INC: quex/byte_loader/ByteLoader_LinuxVFS$$

#include <asm/segment.h> 
/* #include <asm/uaccess.h> */
/* #include <linux/buffer_head.h> */

QUEX_NAMESPACE_QUEX_OPEN

extern bool   QUEX_NAME_LIB(ByteLoader_LinuxVFS_construct)(QUEX_GNAME_LIB(ByteLoader_LinuxVFS)* me, 
                                                           struct file*                         file_p);
extern bool   QUEX_NAME_LIB(ByteLoader_LinuxVFS_construct_from_file_name)(QUEX_GNAME_LIB(ByteLoader_LinuxVFS)* me, 
                                                                          const char*                       FileName);
extern void   QUEX_NAME_LIB(ByteLoader_LinuxVFS_chunk_seek)(QUEX_GNAME_LIB(ByteLoader)* me, 
                                                      QUEX_TYPE_STREAM_POSITION Pos);
extern size_t QUEX_NAME_LIB(ByteLoader_LinuxVFS_chunk_load)(QUEX_GNAME_LIB(ByteLoader)* me, 
                                                      void* buffer, const size_t ByteN, 
                                                      bool*);
extern void   QUEX_NAME_LIB(ByteLoader_LinuxVFS_destruct)(QUEX_GNAME_LIB(ByteLoader)* me);
extern void   QUEX_NAME_LIB(ByteLoader_LinuxVFS_print_this)(QUEX_GNAME_LIB(ByteLoader)* me);
extern bool   QUEX_NAME_LIB(ByteLoader_LinuxVFS_compare_handle)(const QUEX_GNAME_LIB(ByteLoader)* alter_ego_A, 
                                                                const QUEX_GNAME_LIB(ByteLoader)* alter_ego_B);

$$<Cpp>------------------------------------------------------------------------
QUEX_NAME_LIB(ByteLoader_LinuxVFS)::QUEX_NAME_LIB(ByteLoader_LinuxVFS)(struct file* file_p)
{
    (void)QUEX_NAME_LIB(ByteLoader_LinuxVFS_construct)(this, file_p);
}
QUEX_NAME_LIB(ByteLoader_LinuxVFS)::QUEX_NAME_LIB(ByteLoader_LinuxVFS)(const char* FileName)
{
    (void)QUEX_NAME_LIB(ByteLoader_LinuxVFS_construct_from_file_name)(this, FileName); 
}
$$-----------------------------------------------------------------------------

QUEX_GNAME_LIB(ByteLoader)*    
QUEX_NAME_LIB(ByteLoader_LinuxVFS_new)(struct file* file_p)
{
    QUEX_GNAME_LIB(ByteLoader_LinuxVFS)* me;

    if( file_p == NULL ) return (QUEX_GNAME_LIB(ByteLoader)*)0;
    me = (QUEX_GNAME_LIB(ByteLoader_LinuxVFS)*)QUEX_GNAME_LIB(MemoryManager_allocate)(sizeof(QUEX_GNAME_LIB(ByteLoader_LinuxVFS)),
                                                           E_MemoryObjectType_BYTE_LOADER);
    if( ! me ) {
        return (QUEX_GNAME_LIB(ByteLoader)*)0;
    }
    else if( ! QUEX_GNAME_LIB(ByteLoader_LinuxVFS_construct)(me, file_p) ) {
        QUEX_GNAME_LIB(MemoryManager_free)(me, E_MemoryObjectType_BYTE_LOADER);
        return (QUEX_GNAME_LIB(ByteLoader)*)0;
    }
    else {
        QUEX_BASE.ownership = E_Ownership_LEXER;
        return &QUEX_BASE;
    }
}

QUEX_GNAME_LIB(ByteLoader)*    
QUEX_NAME_LIB(ByteLoader_LinuxVFS_new_from_file_name)(const char* FileName)
{
    QUEX_GNAME_LIB(ByteLoader_LinuxVFS)* me;

    me = (QUEX_GNAME_LIB(ByteLoader_LinuxVFS)*)QUEX_GNAME_LIB(MemoryManager_allocate)(sizeof(QUEX_GNAME_LIB(ByteLoader_LinuxVFS)),
                                                                                      E_MemoryObjectType_BYTE_LOADER);
    if( ! me ) {
        return (QUEX_GNAME_LIB(ByteLoader)*)0;
    }
    else if( ! QUEX_GNAME_LIB(ByteLoader_LinuxVFS_construct_from_file_name)(me, FileName) ) {
        QUEX_GNAME_LIB(MemoryManager_free)(me, E_MemoryObjectType_BYTE_LOADER);
        return (QUEX_GNAME_LIB(ByteLoader)*)0;
    }
    else {
        QUEX_BASE.ownership = E_Ownership_LEXER;
        return &QUEX_BASE;
    }
}

bool
QUEX_NAME_LIB(ByteLoader_LinuxVFS_construct_from_file_name)(QUEX_GNAME_LIB(ByteLoader_LinuxVFS)* me, 
                                                            const char*                       FileName)
{
    mm_segment_t oldfs;

    me->file_p = NULL;

    oldfs = get_fs();
    set_fs(get_ds());

    me->file_p = filp_open(path, FMODE_READ, rights);

    set_fs(oldfs);
    if (IS_ERR(me->file_p)) {
        me->file_p = NULL;
        result     = (QUEX_NAME_LIB(ByteLoader)*)0;
    }
    return QUEX_GNAME_LIB(ByteLoader_LinuxVFS_construct)(me, file_p);
}

bool
QUEX_NAME_LIB(ByteLoader_LinuxVFS_construct)(QUEX_GNAME_LIB(ByteLoader_LinuxVFS)* me, struct file* file_p)
{
    QUEX_TYPE_STREAM_POSITION chunk_position_zero = (file_p != NULL) 
                                                    ? vfs_llseek(me->file_p, (loff_t)0, SEEK_CUR)
                                                    : (QUEX_TYPE_STREAM_POSITION)0;
    (void); 
    me->file_p = file_p;

    /* A LinuxVFS file handle is always in binary mode.                         */
    QUEX_GNAME_LIB(ByteLoader_construct)(&QUEX_BASE, true,
                                         /* ChunkSizeInBytes */ 1,
                                         /* ChunkPositionOfReadByteIdxZero */ chunk_position_zero,
                                         QUEX_GNAME_LIB(ByteLoader_LinuxVFS_chunk_seek),
                                         QUEX_GNAME_LIB(ByteLoader_LinuxVFS_chunk_load),
                                         QUEX_GNAME_LIB(ByteLoader_LinuxVFS_destruct),
                                         QUEX_GNAME_LIB(ByteLoader_LinuxVFS_print_this),
                                         QUEX_GNAME_LIB(ByteLoader_LinuxVFS_compare_handle));

    return file_p == NULL ?  false : true;
}

void    
QUEX_NAME_LIB(ByteLoader_LinuxVFS_destruct)(QUEX_GNAME_LIB(ByteLoader)* alter_ego)
{
    QUEX_GNAME_LIB(ByteLoader_LinuxVFS)* me = (QUEX_GNAME_LIB(ByteLoader_LinuxVFS)*)(alter_ego);

    if( me->file_p ) {
        filp_close(me->file_p);
        me->file_p = NULL;
    }
}

void                      
QUEX_NAME_LIB(ByteLoader_LinuxVFS_chunk_seek)(QUEX_GNAME_LIB(ByteLoader)*  alter_ego, 
                                        QUEX_TYPE_STREAM_POSITION    Pos) 
{ 
    QUEX_GNAME_LIB(ByteLoader_LinuxVFS)* me = (QUEX_GNAME_LIB(ByteLoader_LinuxVFS)*)(alter_ego);
    if( ! me->file_p ) { return; }
    (void)vfs_llseek(me->file_p, (loff_t)Pos, SEEK_SET); 
}

size_t  
QUEX_NAME_LIB(ByteLoader_LinuxVFS_chunk_load)(QUEX_GNAME_LIB(ByteLoader)* alter_ego, 
                                        void*                       buffer, 
                                        const size_t                ByteN, 
                                        bool*                       end_of_stream_f) 
/* The LinuxVFS interface does not allow to detect end of file upon reading.
 * The caller will realize end of stream by a return of zero bytes.          */
{ 
    QUEX_GNAME_LIB(ByteLoader_LinuxVFS)* me = (QUEX_GNAME_LIB(ByteLoader_LinuxVFS)*)(alter_ego);
    loff_t                               offset;

    if( ! me->file_p ) { *end_of_stream_f = true; return 0; }

    oldfs = get_fs(); set_fs(get_ds());

    n = vfs_read(me->file_p, buffer, ByteN, &offset);

    set_fs(oldfs);

    /* Theoretically, a last 'terminating zero' might be send over socket 
     * connections. Make sure, that this does not appear in the stream.      */
    if( n && ((uint8_t*)buffer)[n-1] == 0x0 ) {
        --n;
    }
    *end_of_stream_f = false;
    return (size_t)n;
}

bool  
QUEX_NAME_LIB(ByteLoader_LinuxVFS_compare_handle)(const QUEX_GNAME_LIB(ByteLoader)* alter_ego_A, 
                                                  const QUEX_GNAME_LIB(ByteLoader)* alter_ego_B) 
/* RETURNS: true  -- if A and B point to the same LinuxVFS object.
 *          false -- else.                                                   */
{ 
    const QUEX_GNAME_LIB(ByteLoader_LinuxVFS)* A = (QUEX_GNAME_LIB(ByteLoader_LinuxVFS)*)(alter_ego_A);
    const QUEX_GNAME_LIB(ByteLoader_LinuxVFS)* B = (QUEX_GNAME_LIB(ByteLoader_LinuxVFS)*)(alter_ego_B);

    return A->file_p == B->file_p;
}

void                       
QUEX_NAME_LIB(ByteLoader_LinuxVFS_print_this)(QUEX_GNAME_LIB(ByteLoader)* alter_ego)
{
    QUEX_GNAME_LIB(ByteLoader_LinuxVFS)* me = (QUEX_GNAME_LIB(ByteLoader_LinuxVFS)*)(alter_ego);

    QUEX_DEBUG_PRINT("        type:             LinuxVFS;\n");
    QUEX_DEBUG_PRINT1("        file_p:           ((%i));\n", (int)me->file_p);
    QUEX_DEBUG_PRINT("        end_of_stream_f:  <no means to detect>;\n");
}

QUEX_NAMESPACE_QUEX_CLOSE

#endif /*  QUEX_INCLUDE_GUARD__QUEX__BYTE_LOADER__BYTE_LOADER_LINUX_VFS_I */

