#ifndef  QUEX_INCLUDE_GUARD__QUEX__BYTE_LOADER__BYTE_LOADER_STREAM
#define  QUEX_INCLUDE_GUARD__QUEX__BYTE_LOADER__BYTE_LOADER_STREAM
#ifdef __cplusplus

$$INC: quex/byte_loader/ByteLoader$$

#include <fstream>
#include <sstream>

QUEX_NAMESPACE_QUEX_OPEN

template <class StreamT>
class QUEX_NAME_LIB(ByteLoader_stream) : public QUEX_GNAME_LIB(ByteLoader) {
public:
    QUEX_NAME_LIB(ByteLoader_stream)(StreamT* sh,
                                     bool                              BinaryModeF = false);
    QUEX_NAME_LIB(ByteLoader_stream)(const char*        FileName,
                                     const std::locale* locale = nullptr);

    StreamT*  input_handle;
};

template <class StreamT> inline QUEX_GNAME_LIB(ByteLoader)*
QUEX_NAME_LIB(ByteLoader_stream_new)(StreamT* sh, bool BinaryModeF = false);

template <class charT> inline extern QUEX_GNAME_LIB(ByteLoader)*    
QUEX_NAME_LIB(ByteLoader_stream_new_from_file_name)(const char*        FileName,
                                                    const std::locale* locale = nullptr);

template <class StreamT> inline bool
QUEX_NAME_LIB(ByteLoader_stream_construct)(QUEX_GNAME_LIB(ByteLoader_stream)<StreamT>* me, 
                                           StreamT* sh,
                                           bool BinaryModeF = false);

template <class StreamT> inline bool
QUEX_NAME_LIB(ByteLoader_stream_construct_from_file_name)(QUEX_NAME_LIB(ByteLoader_stream)<StreamT>* me, 
                                                          const char*                                     FileName,
                                                          const std::locale*                              locale = nullptr);

//_____________________________________________________________________________
// TEMPLATE IMPLEMENTATION (inline functions done in header)
//
template <class StreamT> inline void                       QUEX_NAME_LIB(ByteLoader_stream_chunk_seek)(QUEX_GNAME_LIB(ByteLoader)* me, 
                                                                                                    QUEX_TYPE_STREAM_POSITION   Pos);
template <class StreamT> inline size_t                     QUEX_NAME_LIB(ByteLoader_stream_chunk_load)(QUEX_GNAME_LIB(ByteLoader)* me, 
                                                                                                    void*                       buffer, 
                                                                                                    const size_t                ByteChunkN, 
                                                                                                    bool*                       end_of_stream_f);
template <class StreamT> inline void                       QUEX_NAME_LIB(ByteLoader_stream_destruct)(QUEX_GNAME_LIB(ByteLoader)* me);
template <class StreamT> inline void                       QUEX_NAME_LIB(ByteLoader_stream_print_this)(QUEX_GNAME_LIB(ByteLoader)* alter_ego);
template <class StreamT> inline bool                       QUEX_NAME_LIB(ByteLoader_stream_compare_handle)(const QUEX_GNAME_LIB(ByteLoader)* alter_ego_A, 
                                                                                                               const QUEX_GNAME_LIB(ByteLoader)* alter_ego_B);

template <class StreamT>  inline 
QUEX_NAME_LIB(ByteLoader_stream)<StreamT>::QUEX_NAME_LIB(ByteLoader_stream)(StreamT* sh, 
                                                                                 bool                              BinaryModeF /* = false */)
{
    (void)QUEX_GNAME_LIB(ByteLoader_stream_construct)(this, sh, BinaryModeF);
}

template <class StreamT>  inline 
QUEX_NAME_LIB(ByteLoader_stream)<StreamT>::QUEX_NAME_LIB(ByteLoader_stream)(const char*        FileName,
                                                                                 const std::locale* locale /* = nullptr */)
{
    (void)QUEX_GNAME_LIB(ByteLoader_stream_construct_from_file_name)<StreamT>(this, FileName, locale);
}

template <class StreamT> inline QUEX_GNAME_LIB(ByteLoader)*
QUEX_NAME_LIB(ByteLoader_stream_new)(StreamT* sh, bool BinaryModeF /* = false */)
{
    QUEX_GNAME_LIB(ByteLoader_stream)<StreamT>* me;

    if( ! sh ) return (QUEX_GNAME_LIB(ByteLoader)*)0;

    me = (QUEX_GNAME_LIB(ByteLoader_stream)<StreamT>*)QUEX_GNAME_LIB(MemoryManager_allocate)(sizeof(QUEX_GNAME_LIB(ByteLoader_stream)<StreamT>),
                                                                        E_MemoryObjectType_BYTE_LOADER);

    if( ! me ) {
        return (QUEX_GNAME_LIB(ByteLoader)*)0;
    } 
    else if( ! QUEX_GNAME_LIB(ByteLoader_stream_construct)<StreamT>(me, sh, BinaryModeF) ) {
        QUEX_GNAME_LIB(MemoryManager_free)(me, E_MemoryObjectType_BYTE_LOADER);
        return (QUEX_GNAME_LIB(ByteLoader)*)0;
    }
    else {
        me->ownership = E_Ownership_LEXER;
        return me;
    }
}

template <class charT> inline extern QUEX_GNAME_LIB(ByteLoader)*    
QUEX_NAME_LIB(ByteLoader_stream_new_from_file_name)(const char*        FileName,
                                                    const std::locale* locale /* = nullptr */)
{
    typedef std::basic_ifstream<charT, std::char_traits<charT> > StreamT;

    quex::ByteLoader_stream<StreamT>* me;                                                         

    me = (QUEX_GNAME_LIB(ByteLoader_stream)<StreamT>*)QUEX_GNAME_LIB(MemoryManager_allocate)(sizeof(QUEX_GNAME_LIB(ByteLoader_stream)<StreamT>),
                                                                                             E_MemoryObjectType_BYTE_LOADER);

    if( ! me ) {
        return (QUEX_GNAME_LIB(ByteLoader)*)0;
    }
    else if( ! QUEX_GNAME_LIB(ByteLoader_stream_construct_from_file_name)<StreamT>(me, FileName, locale) ) {
        QUEX_GNAME_LIB(MemoryManager_free)(me, E_MemoryObjectType_BYTE_LOADER);
        return (QUEX_GNAME_LIB(ByteLoader)*)0;
    }
    else {
        me->ownership = E_Ownership_LEXER;
        return me;
    }
}

template <class StreamT> inline bool
QUEX_NAME_LIB(ByteLoader_stream_construct_from_file_name)(QUEX_NAME_LIB(ByteLoader_stream)<StreamT>* me, 
                                                          const char*                                FileName,
                                                          const std::locale*                         locale /* = nullptr */)
{
    StreamT*  sh;
    bool      binary_mode_f = true;
    try {
        sh = new StreamT();
    }
    catch (...) { /* '...' because the provided stream may be a wild one.     */
        return false;
    }
    try {
        if( locale ) {
            sh->imbue(*locale);
            binary_mode_f = false;
        }
        sh->open(FileName, std::ios_base::binary | std::ios::in);
    }
    catch (...) { /* '...' because the provided stream may be a wild one.     */
        delete sh; /* 'sh' cannot be a pointer to a local/global variable !   */
        return false;
    }
    return QUEX_GNAME_LIB(ByteLoader_stream_construct)<StreamT>(me, sh, binary_mode_f);
}

template <class StreamT>  inline bool
QUEX_NAME_LIB(ByteLoader_stream_construct)(QUEX_GNAME_LIB(ByteLoader_stream)<StreamT>* me, 
                                           StreamT*                                    sh,
                                           bool                                        BinaryModeF /* = false */)
{
    QUEX_TYPE_STREAM_POSITION chunk_position_zero = sh ? (QUEX_TYPE_STREAM_POSITION)sh->tellg() 
                                                       : (QUEX_TYPE_STREAM_POSITION)0;

    QUEX_GNAME_LIB(ByteLoader_construct)(me, BinaryModeF,
                                         /* ChunkSizeInBytes */ sizeof(typename StreamT::char_type),
                                         chunk_position_zero,
                                         QUEX_GNAME_LIB(ByteLoader_stream_chunk_seek)<StreamT>,
                                         QUEX_GNAME_LIB(ByteLoader_stream_chunk_load)<StreamT>,
                                         QUEX_GNAME_LIB(ByteLoader_stream_destruct)<StreamT>,
                                         QUEX_GNAME_LIB(ByteLoader_stream_print_this)<StreamT>,
                                         QUEX_GNAME_LIB(ByteLoader_stream_compare_handle)<StreamT>);

    if( ! sh )  { 
        me->input_handle = nullptr; 
        return false; 
    }
    else if( sh->fail() ) { 
        me->input_handle = nullptr; 
        delete sh; 
        return false; 
    }
    else {
        me->input_handle = sh;
        return true;
    }
}

template <class StreamT>  inline void
QUEX_NAME_LIB(ByteLoader_stream_destruct)(QUEX_GNAME_LIB(ByteLoader)* alter_ego)
{
    QUEX_GNAME_LIB(ByteLoader_stream)<StreamT>* me = (QUEX_GNAME_LIB(ByteLoader_stream)<StreamT>*)alter_ego;

    if( me->input_handle ) {
        delete me->input_handle;
        me->input_handle = nullptr;
    }
}

template <class StreamT>  inline void                      
QUEX_NAME_LIB(ByteLoader_stream_chunk_seek)(QUEX_GNAME_LIB(ByteLoader)*    alter_ego, 
                                      QUEX_TYPE_STREAM_POSITION Pos) 
{ 
    QUEX_GNAME_LIB(ByteLoader_stream)<StreamT>*  me             = (QUEX_GNAME_LIB(ByteLoader_stream)<StreamT>*)alter_ego;
    typename StreamT::pos_type                        target_chunk_i = (typename StreamT::pos_type)(Pos);

    if( ! me->input_handle ) { return; }
    try {
        me->input_handle->clear();          /* Clear any iostate flag. */
        (void)me->input_handle->seekg(target_chunk_i);
    }
    catch (...) {
    }
}

template <class StreamT>  inline size_t  
QUEX_NAME_LIB(ByteLoader_stream_chunk_load)(QUEX_GNAME_LIB(ByteLoader)*  alter_ego, 
                                      void*        buffer, 
                                      const size_t ByteChunkN, 
                                      bool*        end_of_stream_f) 
{ 
    QUEX_GNAME_LIB(ByteLoader_stream)<StreamT>* me = (QUEX_GNAME_LIB(ByteLoader_stream)<StreamT>*)alter_ego;

    if( ! me->input_handle ) { *end_of_stream_f = 0; return 0; }

    if( ! ByteChunkN ) return (size_t)0;

    try {
        me->input_handle->read((typename StreamT::char_type*)buffer, (std::streamsize)(ByteChunkN)); 
    }
    catch (...) {
        return (size_t)0;
    }

    *end_of_stream_f = me->input_handle->eof();

    try {
        return (size_t)(me->input_handle->gcount());
    }
    catch (...) {
        return (size_t)0;
    }
}

template <class StreamT> inline  bool  
QUEX_NAME_LIB(ByteLoader_stream_compare_handle)(const QUEX_GNAME_LIB(ByteLoader)* alter_ego_A, 
                                                const QUEX_GNAME_LIB(ByteLoader)* alter_ego_B) 
/* RETURNS: true  -- if A and B point to the same StreamType object.
 *          false -- else.                                                   */
{ 
    const QUEX_GNAME_LIB(ByteLoader_stream)<StreamT>* A = (QUEX_GNAME_LIB(ByteLoader_stream)<StreamT>*)(alter_ego_A);
    const QUEX_GNAME_LIB(ByteLoader_stream)<StreamT>* B = (QUEX_GNAME_LIB(ByteLoader_stream)<StreamT>*)(alter_ego_B);

    return A->input_handle == B->input_handle;
}

template <class StreamT> inline void
QUEX_NAME_LIB(ByteLoader_stream_print_this)(QUEX_GNAME_LIB(ByteLoader)* alter_ego)
{
    QUEX_GNAME_LIB(ByteLoader_stream)<StreamT>*  me = (QUEX_GNAME_LIB(ByteLoader_stream)<StreamT>*)alter_ego;
    (void)alter_ego;

    QUEX_DEBUG_PRINT("        type:             istream;\n");
    QUEX_DEBUG_PRINT1("        stream:           ((%p));\n", (const void*)me->input_handle);
    if( me->input_handle ) {
        QUEX_DEBUG_PRINT1("        end_of_stream:    %s;\n", E_Boolean_NAME(me->input_handle->eof()));
    }
}

QUEX_NAMESPACE_QUEX_CLOSE

#endif /* __cplusplus                           */
#endif /*  QUEX_INCLUDE_GUARD__QUEX__BYTE_LOADER__BYTE_LOADER_STREAM */
