/* vim: ft=c: 
 *
 *  PURPOSE: This ByteLoader reads directly from a chunk of memory. 
 *
 *  Instead of reading from a file, it reads from a byte array which is passed
 *  to the constructor. The positioning inside the array is given by the offset
 *  to the beginning of the byte array. As such 'tell()' returns the offset to
 *  the beginning of the array and 'seek()' sets the offset of the array from
 *  where the next content is to be read.
 *
 *         position -----------. 
 *         Begin  ---.         |
 *                   |         | 
 *         array:    [*.*.*.*.*.x.x.x.x.x.x.x.*.*.*.*.*.*]
 *                             |             |
 *                             |--- load_n ->|  
 *                             '-------------'
 *                                   '---------------------->  
 *                                         bytes transferred upon 'load()'
 *
 *  It is intended for testing applications where fast access to predictable 
 *  content is required.
 *
 *  The 'ownership', i.e. who has to free the memory, remains in the hands of
 *  the one who passed it to this byte loader.
 *
 * (C) Frank-Rene Schaefer                                                   */
#ifndef  QUEX_INCLUDE_GUARD__QUEX__BYTE_LOADER__BYTE_LOADER_MEMORY
#define  QUEX_INCLUDE_GUARD__QUEX__BYTE_LOADER__BYTE_LOADER_MEMORY

$$INC: quex/byte_loader/ByteLoader$$

#ifdef __cplusplus
extern "C" {
#endif
#include <stdio.h>
$$INC: quex/MemoryManager$$
#ifdef __cplusplus
}
#endif

QUEX_NAMESPACE_QUEX_OPEN

QUEX_CLASS_BEGIN(ByteLoader_Memory,ByteLoader)
    $$<Cpp>QUEX_NAME_LIB(ByteLoader_Memory)(const uint8_t* BeginP, const uint8_t* EndP);$$
    $$<Cpp>QUEX_NAME_LIB(ByteLoader_Memory)(const char* FileName);$$

    struct {
        const uint8_t*     begin_p;
        const uint8_t*     end_p;
        const uint8_t*     position;
    } byte_array;
    E_Ownership            memory_ownership;

QUEX_CLASS_END(ByteLoader_Memory)

extern QUEX_GNAME_LIB(ByteLoader)*    QUEX_NAME_LIB(ByteLoader_Memory_new)(const uint8_t*  BeginP,
                                                                           const uint8_t*  EndP);
extern QUEX_GNAME_LIB(ByteLoader)*    QUEX_NAME_LIB(ByteLoader_Memory_new_from_file_name)(const char*);

extern bool    QUEX_NAME_LIB(ByteLoader_Memory_construct)(QUEX_GNAME_LIB(ByteLoader_Memory)* me,
                                                          const uint8_t*                     BeginP,
                                                          const uint8_t*                     EndP);
extern bool    QUEX_NAME_LIB(ByteLoader_Memory_construct_from_file_name)(QUEX_GNAME_LIB(ByteLoader_Memory)* me, 
                                                                         const char*                        FileName);

QUEX_NAMESPACE_QUEX_CLOSE

#endif /*  QUEX_INCLUDE_GUARD__QUEX__BYTE_LOADER__BYTE_LOADER_MEMORY */
